---
layout: post
title: "Installing Onetime Secret: The Complete Guide (Part 1 of 5)"
date: 2024-10-08
authors:
  - name: Delano
    to: https://docs.onetimesecret.com/about
    avatar:
      src: /img/portait-profile-pic-delano-2024.jpeg
badge:
  label: Guide
readingTime: 15
_draft: true
---


# Installing Onetime Secret: The Complete Guide (Part 1 of 5)


Welcome to our comprehensive series on setting up and installing Onetime Secret. In this first installment, we'll walk you through the process of installing Onetime Secret as a standalone web application using the latest methods and best practices. Whether you're a seasoned sysadmin or just getting started with self-hosting, this guide will help you get Onetime Secret up and running smoothly.

## Introduction

Onetime Secret is a secure, open-source solution for sharing sensitive information. It allows you to send passwords, private links, and other confidential data through a link that can only be viewed once. This guide covers the installation process for the standalone version of Onetime Secret. Just a heads-up: we'll be using a Linux-based system (Debian recommended) for this tutorial. This is not a complete production install. it will be ruby thin server running on PORT 3000 connected to a basic redis server installation. Not covered are ssl cert, domain config, reverse proxy, secure and product-ready redis config (e.g. backups, authentication, systemt tuning etc).

But before we dive in, here's a quick teaser for what's coming in Part 2 of our series:

> **Coming Soon: Onetime Secret Lite Installation**
>
> In our next post, we'll introduce a new installation method for Onetime Secret Lite. This streamlined Docker image combines both the webapp and Redis, leveraging the ephemeral nature of Docker containers as a security feature. By default, once the container is stopped or removed, all secrets disappear â€“ providing an extra layer of protection for your sensitive data. Stay tuned for this exciting new option!

Now, let's get started with installing the full version of Onetime Secret.

## Prerequisites

Before beginning the installation, ensure you have the following:

- A Linux-based system (Debian recommended) or macOS
- Root or sudo access
- Basic familiarity with the command line

## Step 1: System Requirements

Onetime Secret requires the following:

- Ruby 3.1+ (3.0 may work but is not officially supported)
- Redis server 5+
- Node.js 22+
- pnpm 9.0.0+
- Additional packages: build-essential, libyaml-dev, libffi-dev

Minimum system specifications:
- 2 core CPU (or equivalent)
- 1GB memory
- 4GB disk

## Step 2: Install Dependencies

First, update your package list and install the necessary dependencies:

```bash
sudo apt update
sudo apt install -y git redis-server build-essential libyaml-dev libffi-dev
```

Next, install Ruby 3.1:

```bash
sudo apt install -y ruby3.1 ruby3.1-dev
```

Install Node.js and pnpm:

```bash
curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
sudo apt install -y nodejs
sudo npm install -g pnpm@latest
```

## Step 3: Get the Onetime Secret Code

Clone the Onetime Secret repository:

```bash
git clone https://github.com/onetimesecret/onetimesecret.git
cd onetimesecret
```

## Step 4: Initialize Configuration Files

Set up the necessary configuration files:

```bash
git rev-parse --short HEAD > .commit_hash.txt
cp --preserve --no-clobber ./etc/config.example.yaml ./etc/config.yaml
```

## Step 5: Install Ruby Dependencies

Install Bundler and the required Ruby gems:

```bash
sudo gem install bundler
bundle config set --local without 'development test'
bundle update --bundler
bundle install
```

## Step 6: Install JavaScript Dependencies

Install the necessary JavaScript packages:

```bash
pnpm install --frozen-lockfile
```

## Step 7: Build the Frontend

Compile the frontend assets:

```bash
pnpm run build
```

## Step 8: Configure Onetime Secret

Edit the `./etc/config.yaml` file to customize your Onetime Secret installation. At minimum, update the `site:secret` key with a secure random value:

```yaml
:site:
  :secret: your_secure_random_key_here
```

You can generate a secure key using:

```bash
openssl rand -hex 32
```

## Step 9: Run the Web Application

For a production-like environment:

```bash
RACK_ENV=production bundle exec thin -R config.ru -p 3000 start
```

For development with Ruby live reloading:

```bash
RACK_ENV=development bundle exec thin -R config.ru -p 3000 start
```

Make sure to set `development:enabled: false` in your `etc/config.yaml` file.

## Conclusion

Congratulations! You've successfully installed Onetime Secret. You can now access it by navigating to `http://localhost:3000` in your web browser.

In our next post, we'll explore the streamlined Onetime Secret Lite Docker image, offering an even simpler installation process with built-in ephemerality for enhanced security. Stay tuned for Part 2 of our series!

---

This concludes Part 1 of our 5-part series on setting up and installing Onetime Secret. In future posts, we'll cover:

- Part 2: Installing Onetime Secret Lite with Docker
- Part 3: Using Caddy as a Reverse Proxy for Onetime Secret
- Parts 4 and 5: TBD (open to suggestions!)

We hope you found this guide helpful. If you have any questions or suggestions for future topics, please let us know in the comments below!
